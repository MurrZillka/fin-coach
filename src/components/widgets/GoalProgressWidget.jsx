// src/components/GoalProgressWidget.jsx
import React from 'react';
import useGoalsStore from '../../stores/goalsStore.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä –¶–µ–ª–µ–π
import useBalanceStore from '../../stores/balanceStore.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä –ë–∞–ª–∞–Ω—Å–∞
import Text from '../ui/Text.jsx'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Text


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å" ---
const getDaysNoun = (num) => {
    const absNum = Math.abs(num);
    if (absNum % 100 >= 11 && absNum % 100 <= 19) {
        return '–¥–Ω–µ–π';
    }
    const lastDigit = absNum % 10;
    if (lastDigit === 1) {
        return '–¥–µ–Ω—å';
    } else if (lastDigit >= 2 && lastDigit <= 4) {
        return '–¥–Ω—è';
    } else {
        return '–¥–Ω–µ–π';
    }
};


export default function GoalProgressWidget() {
    const { currentGoal, currentGoalLoading } = useGoalsStore();
    const { balance, isLoading: isBalanceLoading } = useBalanceStore();

    const isLoading = currentGoalLoading || isBalanceLoading;

    // --- –†–∞—Å—á–µ—Ç—ã –ü—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
    let percentage = 0;
    let remainingAmount = null;

    if (currentGoal && typeof balance === 'number' && typeof currentGoal.amount === 'number' && currentGoal.amount > 0) {
        const achieved = balance >= 0 ? balance : 0;
        percentage = Math.min((achieved / currentGoal.amount) * 100, 100);
        remainingAmount = Math.max(0, currentGoal.amount - achieved);
    }

    // --- –†–∞—Å—á–µ—Ç –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –î–Ω–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–∞—Ç—ã ---
    let remainingDays = null;
    let daysText = '';

    if (currentGoal && currentGoal.wish_date && currentGoal.wish_date !== "0001-01-01T00:00:00Z") {
        try {
            const wishDate = new Date(currentGoal.wish_date);
            const currentDate = new Date();
            wishDate.setHours(0, 0, 0, 0);
            currentDate.setHours(0, 0, 0, 0);

            const timeDifference = wishDate.getTime() - currentDate.getTime();
            const dayDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

            remainingDays = dayDifference;

            if (remainingDays > 0) {
                daysText = `${remainingDays} ${getDaysNoun(remainingDays)}`;
            } else if (remainingDays === 0) {
                daysText = '—Å–µ–≥–æ–¥–Ω—è';
            } else {
                daysText = `–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(remainingDays)} ${getDaysNoun(Math.abs(remainingDays))}`;
            }
        } catch (e) {
            console.error("Error calculating remaining days:", e);
            daysText = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
        }
    } else {
        daysText = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    }
    // --- –ö–æ–Ω–µ—Ü –†–∞—Å—á–µ—Ç–∞ –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –î–Ω–µ–π ---


    // --- –õ–æ–≥–∏–∫–∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¶–≤–µ—Ç–∞ –°–µ–≥–º–µ–Ω—Ç–æ–≤ ---
    const numSegments = 40;
    const segments = Array.from({ length: numSegments });

    const getSegmentColorClass = (segmentIndex, totalPercentage) => {
        const segmentEndPercentage = ((segmentIndex + 1) / numSegments) * 100;

        if (totalPercentage >= segmentEndPercentage) {
            const barPercentagePoint = segmentEndPercentage;

            if (barPercentagePoint <= 25) return 'bg-red-500';
            if (barPercentagePoint <= 50) return 'bg-orange-500';
            if (barPercentagePoint <= 75) return 'bg-yellow-500';
            if (barPercentagePoint <= 100) return 'bg-green-500';
            return 'bg-green-500';

        } else {
            return 'bg-gray-300';
        }
    };

    // --- –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –í–∏–¥–∂–µ—Ç–∞ ---

    if (isLoading) {
        return (
            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞: —à–∏—Ä–∏–Ω–∞ w-full –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, w-2/3 –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
            <div className="flex-shrink-0 w-full md:w-2/3 text-right"> {/* –ò–ó–ú–ï–ù–ï–ù–û w-1/3 –Ω–∞ w-2/3, –¥–æ–±–∞–≤–ª–µ–Ω w-full */}
                <Text variant="body" className="text-secondary-600 italic">
                    –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–∏ –∏ –±–∞–ª–∞–Ω—Å–∞...
                </Text>
            </div>
        );
    }

    if (!currentGoal) {
        return (
            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–µ–ª–∏: —à–∏—Ä–∏–Ω–∞ w-full –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, w-2/3 –Ω–∞ –¥–µ—Å–∫–ø–æ–ø–∞—Ö
            <div className="flex-shrink-0 w-full md:w-2/3 text-left"> {/* –ò–ó–ú–ï–ù–ï–ù–û w-1/3 –Ω–∞ w-2/3, –¥–æ–±–∞–≤–ª–µ–Ω w-full */}
                <Text variant="body" className="text-blue-700 font-semibold italic">
                    –í—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–ª—è —Å–µ–±—è –≥–ª–∞–≤–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å. –£—Å–∏–ª—å—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å!
                </Text>
            </div>
        );
    }

    if (currentGoal.is_achieved || percentage >= 100) {
        let achievedText = '';
        if (currentGoal.achievement_date && currentGoal.achievement_date !== "0001-01-01T00:00:00Z") {
            try {
                const achievedDate = new Date(currentGoal.achievement_date);
                achievedText = `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –í–∞–º–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ${achievedDate.toLocaleDateString('ru-RU')}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ`; // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            } catch (e) {
                console.error("Error formatting achievement date:", e);
            }
        }
        return (
            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏: —à–∏—Ä–∏–Ω–∞ w-full –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, w-2/3 –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
            <div className=" flex-shrink-0 w-full md:w-2/3 text-left"> {/* –ò–ó–ú–ï–ù–ï–ù–û w-1/3 –Ω–∞ w-2/3, –¥–æ–±–∞–≤–ª–µ–Ω w-full */}
                <Text variant="body" className="text-green-700 font-semibold italic">
                    {achievedText}
                </Text>
            </div>
        );
    }


    if (typeof currentGoal.amount !== 'number' || currentGoal.amount <= 0) {
        return (
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å—É–º–º—ã —Ü–µ–ª–∏: —à–∏—Ä–∏–Ω–∞ w-full –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, w-2/3 –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
            <div className="flex-shrink-0 w-full md:w-2/3 text-right"> {/* –ò–ó–ú–ï–ù–ï–ù–û w-1/3 –Ω–∞ w-2/3, –¥–æ–±–∞–≤–ª–µ–Ω w-full */}
                <Text variant="body" className="text-red-500 italic">
                    –°—É–º–º–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å &gt; 0.
                </Text>
            </div>
        );
    }

    const formattedRemainingAmount = typeof remainingAmount === 'number'
        ? remainingAmount.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 })
        : '--.--';

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç—Ä–æ–∫–∏, –í–ö–õ–Æ–ß–ê–Ø –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –∑–Ω–∞—á–æ–∫ —Ä—É–±–ª—è
    let infoText = '';
    const daysPart = (daysText && daysText !== '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞' && daysText !== '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞') ? `${daysText}, ` : '';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º —Ä—É–±–ª—è
    infoText = `–î–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${daysPart}${formattedRemainingAmount}${'\u00A0'}‚ÇΩ`; // –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º —Ä—É–±–ª—è

    if (daysText === '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞' || daysText === '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞') {
        infoText += ` (${daysText})`;
    }

    const formattedPercentage = percentage.toFixed(0);
    return (
        // –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        // flex-shrink-0: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ
        // w-full: –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö/–ø–ª–∞–Ω—à–µ—Ç–∞—Ö
        // md:w-2/3: –∑–∞–Ω–∏–º–∞–µ—Ç 2/3 —à–∏—Ä–∏–Ω—ã –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
        // flex flex-col: —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–ª–æ–Ω–∫—É
        // items-start: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –î–û–ß–ï–†–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ö–û–õ–û–ù–ö–ò –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        <div className="w-full md:w-2/3 flex flex-col items-start"> {/* –ò–ó–ú–ï–ù–ï–ù–û: w-1/3 –Ω–∞ w-2/3, –¥–æ–±–∞–≤–ª–µ–Ω w-full, —É–¥–∞–ª–µ–Ω text-right */}

            {/* –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–æ –∑–Ω–∞—á–∫–æ–º —Ä—É–±–ª—è) */}
            {/* –û–±–µ—Ä–Ω—É—Ç–∞ –≤ div w-full flex justify-end, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–∞–º–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–ª–∞—Å—å –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é */}
            <div className="w-full flex md:justify-end md:ml-2">
                <Text variant="body" className="text-secondary-800 text-sm">
                    {infoText}
                </Text>
            </div>

            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ü–æ–ª–æ—Å—ã –ü—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */}
            {/* w-full: –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º flex-col */}
            {/* flex items-center: —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ */}
            {/* –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —Ä–æ–¥–∏—Ç–µ–ª—è (–∏–∑-–∑–∞ items-start) */}
            <div className="w-full flex items-center md:ml-2">
                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ü–æ–ª–æ—Å—ã –ü—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
                {/* flex-grow: –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */}
                {/* h-4, bg-gray-300, rounded, overflow-hidden */}
                {/* mr-1: –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */}
                <div className="flex-grow flex h-4 bg-gray-300 rounded overflow-hidden mr-1">
                    {/* –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª–æ—Å—ã */}
                    {segments.map((_, index) => (
                        <div
                            key={index}
                            className={`h-full flex-grow border-r border-white last:border-r-0 ${getSegmentColorClass(index, percentage)}`}
                            style={{ flexBasis: `${100 / numSegments}%` }}
                        ></div>
                    ))}
                </div>

                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */}
                {/* flex-shrink-0: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ */}
                {/* text-right: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ */}
                {/* minWidth: —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–º–µ—â–∞–ª—Å—è */}
                <div className="flex-shrink-0 text-right" style={{ minWidth: '40px' }}> {/* –£–¥–∞–ª–µ–Ω ml-0, —Ç.–∫. mr-1 –Ω–∞ –±–∞—Ä–µ, —É–¥–∞–ª–µ–Ω flex-grow */}
                    <Text variant="body" className="text-secondary-800 font-semibold">{formattedPercentage}%</Text>
                </div>
            </div>
        </div>
    );
}